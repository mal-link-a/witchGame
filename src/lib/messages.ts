import { getRandomInt } from "../share/getRandomInt";
import { messageTypes, PotionColors } from "./types";

const messages = {
  welcome: [
    " — Приветствую в моём скромном жилище, дорогой гость. Надеюсь, ты составишь мне компанию на некоторое время. Я хочу сыграть с тобой в игру. Я загадаю какую-то последовательность цветов, и твоя задача - её отгадать. На каждую твою попытку я буду говорить, сколько цветов было отгадано верно. Развей мою скуку, дорогой гость. ",
  ],
  returnToWelcome: [" — Хорошо отдохни. Надеюсь, мы скоро продолжим."],
  talk: [
    [
      " — Такое чувство, что познание и поиск ответов — это те вещи, которые придают жизни смысл. Если мы вдруг найдем все ответы, останется ли в жизни хоть какой-то смысл?",
    ],
    [
      " — В конце длинного дня обычно я хочу просто сесть и ничего не делать. Я так выгораю, после того как приходится весь день улыбаться и излучать энергию. Порой меня так и тянет влезть в свою пижамку, уставиться в хрустальный шар и набить рот нездоровыми закусками. Такое блаженство так отдыхать в пятницу, когда впереди выходные и нет срочных дел.",
    ],
    [
      " — Ты когда-нибудь думал, почему среди людей нет равенства? Очевидно, потому что люди не равны. Кто-то владеет хорошими рефлексами, кто-то любит работать головой, а кто-то хорошо управляет другими людьми. Последний как-раз может продвигать в массы эту чепуху про равенство. Оглянись вокруг. Разве не хорошо, когда человек раскрывает весь свой потенциал? Например, ты наиболее ценен своей возможностью развлекать меня.",
    ],
    [
      " — Человеческая жизнь коротка. Как для человека коротка жизнь мотылька, так и для меня коротка жизнь человека. Скорее всего, я забуду о тебе через 30-40 лет... Думая над этим, я содрогаюсь от мысли о том, что если где-то там есть некие бессмертные сущности, то как мы выглядим в их глазах?",
    ],
    [
      " — Стремясь к познанию, мы начинаем понимать некие правила, лежащие на поверхности. Копая глубже, мы начинаем понимать правила, которые лежат в основе других правил, как бы выходя на более глубокий слой знаний. Но у наших правил тоже есть правила их составляющие. И так слой за слоем мы продвигаемся к мифическому правилу, лежащему в основе всех других правил. Это закон всего",
    ],
  ],
  witchClick: [" — Прекрати."],
  win: [" — Это твоя победа. Хо рошая работа."],
  lose: [" — Поражение. Это было ожидаемо..."],
  startGame: [" — У тебя восемнадцать попыток. Можешь взять листок и ручку."],
  red: [
    " — Зелье милого красного цвета содержит элегантную дистилированную силу жизни и здоровья.",
    " — Это маленький шедевр зельеварения.",
    " — Если ты меня расстроишь, послужишь хотя бы ингредиентом к такому же. ♥",
  ],
  blue: [
    " — Синее зелье представляет собой силу природы, переведенную  в жидкую форму. Очень освежающе.",
  ],
  green: [
    " — Зелёное зелье представляет собой ужасный магический токсин.",
    " — Оно настолько ядовито, что даже касание бутылки незащищенной рукой вызовет смерть через 10 часов.",
  ],
  white: [
    " — Сверкающее белое чистое зелье содержит самые невинные мечтания и фантазии.",
  ],
  black: [" — Мне нравится чёрное зелье. Оно полно тепла."],
  violet: [
    " — Фиолетовому зелью свой цвет придает один особый ингредиент, который создает в склянке уникальную среду.",
    " — Процесс производства фиолетового зелья самый передовой из всех здесь.",
  ],
  yellow: [
    " — Желтое зелье содержит в себе грехи и сожаления многих людей",
    " — Благодаря ему наш мир чище и радостнее, чем мог бы быть.",
  ],
};
const getRandomMessageOf = (arr: string[][]): string[] => {
  return structuredClone(arr[getRandomInt(arr.length)]);
};
export const getMessage = (type: messageTypes | PotionColors): string[] => {
  switch (type) {
    case messageTypes.welcome: {
      return [...messages.welcome];
    }
    case messageTypes.returnToWelcome: {
      return [...messages.returnToWelcome];
    }
    case messageTypes.talk: {
      return getRandomMessageOf(messages.talk);
    }
    case messageTypes.win: {
      return [...messages.win];
    }
    case messageTypes.lose: {
      return [...messages.lose];
    }
    case messageTypes.startGame: {
      return [...messages.startGame];
    }
    case PotionColors.red: {
      return [...messages.red];
    }
    case PotionColors.blue: {
      return [...messages.blue];
    }
    case PotionColors.green: {
      return [...messages.green];
    }
    case PotionColors.violet: {
      return [...messages.violet];
    }
    case PotionColors.white: {
      return [...messages.white];
    }
    case PotionColors.black: {
      return [...messages.black];
    }
    case PotionColors.yellow: {
      return [...messages.yellow];
    }
    case messageTypes.witchClick: {
      return [...messages.witchClick];
    }
  }
  throw Error(`Error in getMessage — invalid type = ${type}`);
};
